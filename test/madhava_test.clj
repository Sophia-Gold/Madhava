(ns madhava-test
  (:require [clojure.test :refer :all]
            [madhava.arithmetic :refer :all]
            [madhava.vectormath :refer :all]
            [madhava.taylorseries :refer :all]
            [clojure.data.int-map :as i]))

(deftest add-tests
  (is (= (add {11 2, 10 3, 1 5, 0 7}
              {21 1, 10 4, 1 1})
         {21 1, 11 2, 10 7, 1 6, 0 7}))
  (is (= (add {11 2, 10 3, 1 5, 0 7}
              {21 1, 10 4, 1 1}
              {0 10})
         {21 1, 11 2, 10 7, 1 6, 0 17}))
  (is (= (add {11 2, 10 3, 1 5, 0 7} {})
         {11 2, 10 3, 1 5, 0 7})))

(deftest sub-tests
  (is (= (sub {11 2, 10 3, 1 5, 0 7})
         {11 -2, 10 -3, 1 -5, 0 -7}))
  (is (= (sub {11 2, 10 3, 1 5, 0 7}
              {11 2, 10 3, 1 5, 0 7})
         {}))
  (is (= (sub {11 2, 10 3, 1 5, 0 7}
              {11 1, 10 3, 1 5, 0 7})
         {11 1}))
  (is (= (sub {11 2, 10 3, 1 5, 0 7}
              {11 1, 10 3, 1 5, 0 2})
         {11 1, 0 5})))

(deftest scale-tests
  (is (= (scale {11 2, 10 3, 1 5, 0 7} 2)
         {11 4, 10 6, 1 10, 0 14}))
  (is (= (scale {11 2, 10 3, 1 5, 0 7} 1)
         {11 2, 10 3, 1 5, 0 7})))
  ;; (is (= (scale {11 2, 10 3, 1 5, 0 7} 0)
  ;;      {})))

;; (deftest pmul-tests
;;   (is (= (pmul {11 2, 10 3, 1 5, 0 7}
;;                {21 1, 10 4, 1 1})
;;          {32 2, 31 3, 22 5, 21 15, 20 12, 12 2, 11 23, 10 28, 2 5, 1 7}))
;;   (is (= (pmul {11 2, 10 3, 1 5, 0 7}
;;                {0 1})
;;          {11 2, 10 3, 1 5, 0 7}))
;;   ;; (is (= (pmul {11 2, 10 3, 1 5, 0 7}
;;   ;;              {0 0})
;;   ;;        {}))
;;   (is (= (pmul {11 2, 10 3, 1 5, 0 7}
;;               {21 1, 10 4, 1 1}
;;               {0 2})
;;          {32 4, 31 6, 22 10, 21 30, 20 24, 12 4, 11 46, 10 56, 2 10, 1 14})))


;; TO DO: how to handle rational coefficients?
;; (deftest sqrt-tests
;;   (is (= (sqrt {11 2, 10 3, 1 5})
;;          {[1/2 1/2] 1.4142135623730951, [1/2 0] 1.7320508075688772, [0 1/2] 2.23606797749979}))
;;   (is (= (sqrt {[4 4] 4, [2 0] 9, [0 2] 25})
;;          {[2 2] 2.0, [1 0] 3.0, [0 1] 5.0})))

(deftest divide-tests
  (is (= (divide {11 2, 10 3, 1 5, 0 7}
                 {11 2, 10 3, 1 5, 0 7})
         '({0 1} {})))
  (is (= (divide {11 2, 10 3, 1 5, 0 7}
                 {0 1})
         '({11 2, 10 3, 1 5, 0 7} {})))
  (is (= (divide {11 2, 10 10, 1 3, 0 15} {1 1, 0 5})
         '({10 2, 0 3} {})))
  (is (= (divide {11 2, 10 10, 1 3, 0 15} {10 2, 0 3})
         '({1 1, 0 5} {}))))
         
(deftest compose-tests
  (is (= (compose {1 2, 10 3, 1 5, 0 7}
                  {1 2, 10 3, 1 5, 0 7} 1)
         {12 4, 11 12, 2 10, 10 9, 1 34, 0 28}))
  (is (= (compose {1 2, 10 3, 1 5, 0 7}
                  {1 2, 10 3, 1 5, 0 7} 2)
         {21 4, 20 6, 11 20, 10 32, 1 25, 0 42})))

(deftest chain-tests
  (is (= (chain {1 2, 10 3,1 5, 0 7}
                {1 2, 10 3,1 5, 0 7})
         '({13 16, 12 72, 11 108, 10 54, 3 40, 2 196, 1 316, 0 168}
           {31 16, 30 24, 21 120, 20 188, 11 300, 10 488, 1 250, 0 420})))
  (is (= (chain {11 2, 1 5}
                {21 1, 10 4})
         '({33 4, 23 4, 22 24, 12 26, 11 32, 2 10, 1 20}
           {51 2, 41 9, 40 8, 31 20, 30 36, 21 25, 20 80, 10 100})))
  (is (= (chain {21 1, 10 4}
                {11 2, 1 5})
         '({34 8, 24 48, 23 16, 22 16, 14 90, 13 80, 12 56, 11 32, 4 50, 3 100, 2 40, 1 80}
            {51 2, 41 9, 31 20, 30 4, 21 25, 20 8, 10 20}))))

(deftest rchain-tests
  (is (= (rchain {1 2, 10 3,1 5, 0 7}
                 {1 2, 10 3,1 5, 0 7})
         '({13 16, 12 72, 11 108, 10 54, 3 40, 2 196, 1 316, 0 168}
           {31 16, 30 24, 21 120, 20 188, 11 300, 10 488, 1 250, 0 420})))
  (is (= (rchain {11 2, 1 5}
                 {21 1, 10 4}) 
         '({34 8, 24 48, 23 16, 22 16, 14 90, 13 80, 12 56, 11 32, 3 100, 2 40, 4 50, 1 80}
           {51 2, 41 9, 40 8, 31 20, 30 36, 21 25, 20 80, 10 100})))
  (is (= (rchain {21 1, 10 4}
                 {11 2, 1 5})
         '({33 4, 23 4, 22 24, 12 26, 11 32, 2 10, 1 20}
           {51 2, 41 9, 31 20, 30 4, 21 25, 20 8, 10 20}))))
       
(deftest grad-tests
  (is (= (grad {212 8, 100 5, 40 1, 3 2})
         '({112 16, 0 5} {202 8, 30 4} {211 16, 2 6}))))

(deftest directional-diff-tests
  (is (= (directional-diff {11 2, 10 3, 1 5, 0 7} 1)
         {10 2, 1 2, 0 8}))
  (is (= (directional-diff {11 2, 10 3, 1 5, 0 7} 2)
         {10 4, 1 4, 0 16}))
  (is (= (directional-diff {433 5, 212 8, 40 1, 3 2} 3)
       {432 45, 423 45, 333 60, 211 48, 202 24, 112 48, 30 12, 2 18})))

(deftest magnitude-tests
  (is (= (magnitude '({433 5} {212 8} {40 1}))
         {433 5.0, 212 8.0, 40 1.0})))

;; (deftest normal-tests
;;   )

(deftest laplacian-tests
  (is (= (laplacian {[2 1 2] 8, [1 0 0] 5, [0 4 0] 1, [0 0 3] 2})
         '({12 16} {20 12} {[210 16, 1 12}))))

(deftest div-tests
  (is (= (div '({433 5} {212 8} {40 1}))
         '({333 20} {202 8} {}))))

(deftest curl-tests
  (is (= (curl '({433 5} {212 8} {40 1}))
         '({211 -16, 30 4} {432 15} {423 -15, 112 16}))))

;; TO DO: how to handle rational coefficients?
;; (deftest series-tests
;;   (is (= (dense-to-sparse (take 10 (exp-series)))
;;          {9 1/362880, 8 1/40320, 7 1/5040, 6 1/720, 5 1/120, 4 1/24, 3 1/6, 2 1/2, 1 1, 0, 1}))
;;   (is (= (dense-to-sparse (take 10 (sin-series)))
;;          {9 1/362880, 7 -1/5040, 5 1/120, 3 -1/6, 1 1}))
;;   (is (= (dense-to-sparse (take 10 (cos-series)))
;;          {8 1/40320, 6 -1/720, 4 1/24, 2 -1/2, 0 1}))
;;   (is (= (dense-to-sparse (take 10 (atan-series)))
;;          {8 1/9, 6 -1/7, 4 1/5, 2 -1/3, 0 1}))
;;   (is (= (dense-to-sparse (take 10 (sinh-series)))
;;          {9 1/362880, 7 1/5040, 5 1/120, 3 1/6, 1 1}))
;;   (is (= (dense-to-sparse (take 10 (cosh-series)))
;;          {8 1/40320, 6 1/720, 4 1/24, 2 1/2, 0 1})))
