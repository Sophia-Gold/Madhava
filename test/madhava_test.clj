(ns madhava-test
  (:require [clojure.test :refer :all]
            [madhava.arithmetic :refer :all]
            [madhava.comp :refer :all] 
            [madhava.taylorseries :refer :all]
            [madhava.vectormath :refer :all]
            [clj-tuple :refer [vector]])
  (:refer-clojure :exclude [vector]))

(deftest add-tests
  (is (= (add {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 1] 1, [1 0] 4, [2 1] 1})
         {[0 0] 7, [0 1] 6, [1 0] 7, [1 1] 2, [2 1] 1}))
  (is (= (add {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 1] 1, [1 0] 4, [2 1] 1}
              {[0 0] 10})
         {[0 0] 17, [0 1] 6, [1 0] 7, [1 1] 2, [2 1] 1}))
  (is (= (add {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} {})
         {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})))

(deftest sub-tests
  (is (= (sub {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})
         {[0 0] -7, [0 1] -5, [1 0] -3, [1 1] -2}))
  (is (= (sub {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})
         {}))
  (is (= (sub {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 1})
         {[1 1] 1}))
  (is (= (sub {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 0] 2, [0 1] 5, [1 0] 3, [1 1] 1})
         {[1 1] 1, [0 0] 5})))

(deftest scale-tests
  (is (= (scale {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 2)
         {[0 0] 14, [0 1] 10, [1 0] 6, [1 1] 4}))
  (is (= (scale {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 1)
         {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})))
  ;; (is (= (scale {[1 1] 2, [1 0] 3, [0 1] 5, [0 0] 7} 0)
  ;;      {})))

(deftest mul-tests
  (is (= (mul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 1] 1, [1 0] 4, [2 1] 1})
         {[0 1] 7, [0 2] 5, [1 0] 28, [1 1] 23, [1 2] 2, [2 0] 12, [2 1] 15, [2 2] 5, [3 1] 3, [3 2] 2}))
  (is (= (mul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 0] 1})
         {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}))
  ;; (is (= (mul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
  ;;             {[0 0] 0})
  ;;        {}))
  (is (= (mul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
              {[0 1] 1, [1 0] 4, [2 1] 1}
              {[0 0] 2})
         {[0 1] 14, [0 2] 10, [1 0] 56, [1 1] 46, [1 2] 4, [2 0] 24, [2 1] 30, [2 2] 10, [3 1] 6, [3 2] 4})))

;; (deftest pmul-tests
;;   (is (= (pmul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
;;                {[0 1] 1, [1 0] 4, [2 1] 1})
;;          {[0 1] 7, [0 2] 5, [1 0] 28, [1 1] 23, [1 2] 2, [2 0] 12, [2 1] 15, [2 2] 5, [3 1] 3, [3 2] 2}))
;;   (is (= (pmul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
;;                {[0 0] 1})
;;          {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}))
;;   ;; (is (= (pmul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
;;   ;;              {[0 0] 0})
;;   ;;        {}))
;;   (is (= (pmul {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
;;                {[0 1] 1, [1 0] 4, [2 1] 1}
;;                {[0 0] 2})
;;          {[0 1] 14, [0 2] 10, [1 0] 56, [1 1] 46, [1 2] 4, [2 0] 24, [2 1] 30, [2 2] 10, [3 1] 6, [3 2] 4})))

(deftest sqrt-tests
  (is (= (sqrt {[0 1] 5, [1 0] 3, [1 1] 2})
         {[0 1/2] 2.23606797749979, [1/2 0] 1.7320508075688772, [1/2 1/2] 1.4142135623730951}))
  (is (= (sqrt {[0 2] 25, [2 0] 9, [4 4] 4})
         {[0 1] 5.0, [1 0] 3.0, [2 2] 2.0})))

(deftest divide-tests
  (is (= (divide {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                 {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})
         '({[0 0] 1} {})))
  (is (= (divide {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                 {[0 0] 1})
         '({[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} {})))
  (is (= (divide {[0 0] 15, [0 1] 3, [1 0] 10, [1 1] 2} {[0 0] 5, [0 1] 1})
         '({[0 0] 3, [1 0] 2} {})))
  (is (= (divide {[0 0] 15, [0 1] 3, [1 0] 10, [1 1] 2} {[0 0] 3, [1 0] 2})
         '({[0 0] 5, [0 1] 1} {}))))
         
(deftest compose-tests
  (is (= (compose {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                  {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 1)
         {[0 0] 28, [0 1] 34, [0 2] 10, [1 0] 9, [1 1] 12, [1 2] 4}))
  (is (= (compose {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                  {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 2)
         {[0 0] 42, [0 1] 25, [1 0] 32, [1 1] 20, [2 0] 6, [2 1] 4})))

(deftest chain-tests
  (is (= (chain {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})
         '({[0 0] 168, [0 1] 316, [0 2] 196, [0 3] 40, [1 0] 54, [1 1] 108, [1 2] 72, [1 3] 16}
           {[0 0] 420, [0 1] 250, [1 0] 488, [1 1] 300, [2 0] 188, [2 1] 120, [3 0] 24, [3 1] 16})))
  (is (= (chain {[0 1] 5, [1 1] 2}
                {[1 0] 4, [2 1] 1})
         '({[0 1] 20, [0 2] 10, [1 1] 32, [1 2] 26, [2 2] 24, [2 3] 4, [3 3] 4}
           {[1 0] 100, [2 0] 80, [2 1] 25, [3 0] 36, [3 1] 20, [4 0] 8, [4 1] 9, [5 1] 2})))
  (is (= (chain {[1 0] 4, [2 1] 1}
                {[0 1] 5, [1 1] 2})
         '({[0 1] 80, [0 2] 40, [0 3] 100, [0 4] 50, [1 1] 32, [1 2] 56
            , [1 3] 80, [1 4] 90, [2 2] 16, [2 3] 16, [2 4] 48, [3 4] 8}
           {[1 0] 20, [2 0] 8, [2 1] 25, [3 0] 4, [3 1] 20, [4 1] 9, [5 1] 2}))))

(deftest rchain-tests
  (is (= (rchain {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2}
                 {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2})
         '({[0 0] 168, [0 1] 316, [0 2] 196, [0 3] 40, [1 0] 54, [1 1] 108, [1 2] 72, [1 3] 16}
           {[0 0] 420, [0 1] 250, [1 0] 488, [1 1] 300, [2 0] 188, [2 1] 120, [3 0] 24, [3 1] 16})))
  (is (= (rchain {[0 1] 5, [1 1] 2}
                 {[1 0] 4, [2 1] 1})
         '({[0 1] 80, [0 2] 40, [0 3] 100, [0 4] 50, [1 1] 32, [1 2] 56
            , [1 3] 80, [1 4] 90, [2 2] 16, [2 3] 16, [2 4] 48, [3 4] 8}
           {[1 0] 20, [2 0] 8, [2 1] 25, [3 0] 4, [3 1] 20, [4 1] 9, [5 1] 2})))
  (is (= (rchain {[1 0] 4, [2 1] 1}
                 {[0 1] 5, [1 1] 2})
         '({[0 1] 20, [0 2] 10, [1 1] 32, [1 2] 26, [2 2] 24, [2 3] 4, [3 3] 4}
           {[1 0] 100, [2 0] 80, [2 1] 25, [3 0] 36, [3 1] 20, [4 0] 8, [4 1] 9, [5 1] 2}))))
       
(deftest grad-tests
  (is (= (grad {[0 0 3] 2, [0 4 0] 1, [1 0 0] 5, [2 1 2] 8})
         '({[0 0 0] 5, [1 1 2] 16} {[0 3 0] 4, [2 0 2] 8} {[0 0 2] 6, [2 1 1] 16}))))

(deftest directional-diff-tests
  (is (= (directional-diff {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 1)
         {[0 0] 8, [0 1] 2, [1 0] 2}))
  (is (= (directional-diff {[0 0] 7, [0 1] 5, [1 0] 3, [1 1] 2} 2)
         {[0 0] 16, [0 1] 4, [1 0] 4}))
  (is (= (directional-diff {[0 0 3] 2, [0 4 0] 1, [2 1 2] 8, [4 3 3] 5} 3)
         {[0 0 2] 18, [0 3 0] 12, [1 1 2] 48, [2 0 2] 24, [2 1 1] 48, [3 3 3] 60, [4 2 3] 45, [4 3 2] 45})))

(deftest magnitude-tests
  (is (= (magnitude '({[4 3 3] 5} {[2 1 2] 8} {[0 4 0] 1}))
         {[0 4 0] 1.0, [2 1 2] 8.0, [4 3 3] 5.0})))

(deftest laplacian-tests
  (is (= (laplacian {[0 0 3] 2, [0 4 0] 1, [1 0 0] 5, [2 1 2] 8})
         {[0 0 1] 12, [0 1 2] 16, [0 2 0] 12, [2 1 0] 16}))
  (is (= (laplacian {[0 0 3] 2, [0 4 0] 1, [1 0 0] 5, [2 1 2] 8})
         (div (grad {[0 0 3] 2, [0 4 0] 1, [1 0 0] 5, [2 1 2] 8})))))

(deftest div-tests
  (is (= (div [{[4 3 3] 5} {[2 1 2] 8} {[0 4 0] 1}])
         {[2 0 2] 8, [3 3 3] 20}))
  (is (= (div (curl [{[4 3 3] 5} {[2 1 2] 8} {[0 4 0] 1}]))
         {})))

(deftest curl-tests
  (is (= (curl [{[4 3 3] 5} {[2 1 2] 8} {[0 4 0] 1}])
         '({[0 3 0] 4, [2 1 1] -16} {[4 3 2] 15} {[1 1 2] 16, [4 2 3] -15})))
  (is (= (curl (grad {[0 0 3] 2, [0 4 0] 1, [1 0 0] 5, [2 1 2] 8}))
         '({} {} {}))))

(deftest series-tests
  (is (= (dense-to-sparse (take 10 (exp-series)))
         {0 1, 1 1, 2 1/2, 3 1/6, 4 1/24, 5 1/120, 6 1/720, 7 1/5040, 8 1/40320, 9 1/362880}))
  (is (= (dense-to-sparse (take 10 (sin-series)))
         {1 1, 3 -1/6, 5 1/120, 7 -1/5040, 9 1/362880}))
  (is (= (dense-to-sparse (take 10 (cos-series)))
         {0 1, 2 -1/2, 4 1/24, 6 -1/720, 8 1/40320}))
  (is (= (dense-to-sparse (take 10 (atan-series)))
         {0 1, 2 -1/3, 4 1/5, 6 -1/7, 8 1/9}))
  (is (= (dense-to-sparse (take 10 (sinh-series)))
         {1 1, 3 1/6, 5 1/120, 7 1/5040, 9 1/362880}))
  (is (= (dense-to-sparse (take 10 (cosh-series)))
         {0 1, 2 1/2, 4 1/24, 6 1/720, 8 1/40320})))
